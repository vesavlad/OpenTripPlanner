schema: ../../../../../../resources/legacygraphqlapi/schema.graphqls

generates:
  LegacyGraphQLTypes.java:
    plugins:
      - add:
          content: // THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
      - java
    config:
      className: LegacyGraphQLTypes
  LegacyGraphQLDataFetchers.java:
    plugins:
      - add:
          content: //THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
      - java-resolvers
    config:
      className: LegacyGraphQLDataFetchers

config:
  package: org.opentripplanner.ext.legacygraphqlapi.generated
  typesPrefix: LegacyGraphQL
  scalars:
    ID: graphql.relay.Relay.ResolvedGlobalId
    Long: Long
    Polyline: String
  mappers:
    Agency: org.opentripplanner.model.Agency#Agency
    Alert: org.opentripplanner.routing.alertpatch.TransitAlert#TransitAlert
    AlertCauseType: String
    AlertEffectType: String
    AlertSeverityLevelType: String
    BikePark: org.opentripplanner.routing.bike_park.BikePark#BikePark
    BikeRentalStation: org.opentripplanner.routing.vehicle_rental.VehicleRentalStation#VehicleRentalStation
    BikeRentalStationUris: org.opentripplanner.routing.vehicle_rental.VehicleRentalStationUris#VehicleRentalStationUris
    BikesAllowed: String
    BookingInfo: org.opentripplanner.model.BookingInfo
    BookingTime: org.opentripplanner.model.BookingTime
    CarPark: Object
    ContactInfo: org.opentripplanner.model.ContactInfo
    Cluster: Object
    Coordinates: org.locationtech.jts.geom.Coordinate#Coordinate
    debugOutput: org.opentripplanner.api.resource.DebugOutput#DebugOutput
    DepartureRow: org.opentripplanner.routing.graphfinder.PatternAtStop#PatternAtStop
    elevationProfileComponent: org.opentripplanner.common.model.P2#P2<Double>
    fare: java.util.Map#Map<String, Object>
    fareComponent: org.opentripplanner.routing.core.FareComponent#FareComponent
    Feed: String
    Geometry: org.opentripplanner.util.model.EncodedPolylineBean#EncodedPolylineBean
    Itinerary: org.opentripplanner.model.plan.Itinerary#Itinerary
    Leg: org.opentripplanner.model.plan.Leg#Leg
    Mode: String
    PageInfo: Object
    Pattern: org.opentripplanner.model.TripPattern#TripPattern
    PickupDropoffType: String
    Place: org.opentripplanner.model.plan.StopArrival#StopArrival
    placeAtDistance: org.opentripplanner.routing.graphfinder.PlaceAtDistance#PlaceAtDistance
    placeAtDistanceConnection: graphql.relay.Connection#Connection<PlaceAtDistance>
    placeAtDistanceEdge: graphql.relay.Edge#Edge<PlaceAtDistance>
    Plan: org.opentripplanner.routing.api.response.RoutingResponse#RoutingResponse
    RealtimeState: String
    Route: org.opentripplanner.model.Route#Route
    serviceTimeRange: Object
    step: org.opentripplanner.model.plan.WalkStep#WalkStep
    Stop: Object # Can be either Stop or Station
    stopAtDistance: org.opentripplanner.routing.graphfinder.NearbyStop#NearbyStop
    stopAtDistanceConnection: graphql.relay.Connection#Connection<NearbyStop>
    stopAtDistanceEdge: graphql.relay.Edge#Edge<NearbyStop>
    Stoptime: org.opentripplanner.model.TripTimeShort#TripTimeShort
    StoptimesInPattern: org.opentripplanner.model.StopTimesInPattern#StopTimesInPattern
    TicketType: org.opentripplanner.routing.core.FareRuleSet#FareRuleSet
    TranslatedString: java.util.Map#Map.Entry<String, String>
    Trip: org.opentripplanner.model.Trip#Trip
    VertexType: String
    SystemNotice: org.opentripplanner.model.SystemNotice#SystemNotice
